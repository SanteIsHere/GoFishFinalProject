@startuml GoFishGame

' Use standard accessibility icons
skinparam ClassAttributeIconSize 0

abstract class Player {
    # hand: ArrayList<Card> 
    - books: int 
    - booksHeld: Text 
    - statusIndicator: Text
    - indicators: VBox
    # {static} pool: Pool
    # {static} manager: GoFish.GameManager

    + goFish(): void
    + drawCards(rank: int): void
    - hasRank(rank: int): boolean
    + updateHand(): void
    + drawCards(rank: int): Card
    + requestCards(rank: int, otherPlayer: Player): void
    # indicateStatus(message: String): void
    - updateBooks(): void
}

class HumanPlayer {
    - controls: VBox

    + HumanPlayer(manager: GoFish.GameManager, pool: Pool, opponent: CPUPlayer)
    + takeTurn(): void
}

note right of HumanPlayer
    Class that represents a Human player.
    Human players can pass input to the 
    game via their controls.

    The cards in the hand of a Human player
    are visible to the user.
end note

class CPUPlayer {
    
    + takeTurn(HumanPlayer player): void
}

note right of CPUPlayer
    Class that represents a Computer player.
    Non-controllable and autonomous, randomly
    selects a rank of cards to request from
    the player. 
end note

class GoFish {
    - {static} player: Player
    - {static} cpu: Player
    - {static} cardPool: Pool
    - {static} stage: Stage
    - {static} manager: GameManager
}

class GameManager {
    - {static} initGame(): void
    + handleCardsExhausted(message: String): void 
}

note right of GameManager
    Static Inner class of class GoFish
    that manages the state of the game:
    Players, turn, score, etcetera.    
end note

class Pool {
    - deck: ArrayList<Card>
    - img: ImageView
    - count: Text

    + draw(): Card
    + dealCards()
}

note right of Pool
    "Represents the deck of available cards"
end note

class Card {
    - {static} validSuits: String[] = {"Clubs", "Diamonds", 
    "Hearts", "Spades"}
    - {static} rankMap: Map<Integer, String> = {1 -> "A", 11 -> "J", 
    12 -> "Q", 13 -> "K"}
    - rank: int
    - suit: String

    getSymbolicRank(): String
    getRank(): int
    getSuit(): String
    compareTo(otherCard: Card): void
}

note right of Card
    Class that represents each card in a pool or player's hand.
    Implements the `Comparable` interface so that cards can be compared
    and sorted in collections. Extends `ImageView` class so that
    the `Card` can be represented graphically.
end note

class CardsExhaustedException {
    CardsExhaustedException(message: String)
}

note right of CardsExhaustedException
    Subclass of `RuntimeException` that indicates
    that a player - or the pool - has run out of cards
end note

HumanPlayer --|> Player: extends
CPUPlayer --|> Player: extends
Player --> Pool: uses
Player o--> Card: part of
Pool o--> Card: part of
GoFish *--> Pool: has a
CardsExhaustedException --> RuntimeException: extends
GoFish *--> GameManager: composes

@enduml